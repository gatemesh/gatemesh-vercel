# Web Interface Guide

## Overview

Minimal web interface for node configuration and monitoring accessible via WiFi AP mode.

## Web Server Implementation

### File: `src/web/GateMeshWeb.h`

```cpp
#pragma once
#include <WebServer.h>
#include <DNSServer.h>

class GateMeshWebServer {
private:
    WebServer server{80};
    DNSServer dnsServer;
    bool apMode = false;
    
public:
    void begin() {
        setupAccessPoint();
        setupRoutes();
        server.begin();
        
        LOG_INFO("Web server started: http://192.168.4.1\n");
    }
    
    void setupAccessPoint() {
        String apName = "GateMesh-" + getShortNodeId();
        WiFi.softAP(apName.c_str(), "gatemesh123");
        
        IPAddress IP = WiFi.softAPIP();
        LOG_INFO("AP IP: %s\n", IP.toString().c_str());
        
        // Captive portal
        dnsServer.start(53, "*", IP);
        apMode = true;
    }
    
    void setupRoutes() {
        server.on("/", HTTP_GET, [this]() { handleRoot(); });
        server.on("/api/status", HTTP_GET, [this]() { handleStatus(); });
        server.on("/api/config", HTTP_POST, [this]() { handleConfig(); });
        server.on("/api/zones", HTTP_GET, [this]() { handleZones(); });
        server.on("/api/command", HTTP_POST, [this]() { handleCommand(); });
        server.onNotFound([this]() { handleRoot(); });  // Captive portal
    }
    
    void handleRoot() {
        String html = R"(
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GateMesh Control</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            font-size: 32px;
            margin-bottom: 8px;
        }
        .header p {
            opacity: 0.9;
            font-size: 14px;
        }
        .content {
            padding: 30px;
        }
        .card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .card h3 {
            margin-bottom: 15px;
            color: #2c3e50;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #34495e;
        }
        select, input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 16px;
        }
        select:focus, input:focus {
            outline: none;
            border-color: #2ecc71;
        }
        .btn {
            width: 100%;
            padding: 14px;
            background: #2ecc71;
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
        }
        .btn:hover {
            background: #27ae60;
        }
        .status {
            display: flex;
            justify-content: space-between;
            padding: 12px;
            background: white;
            border-radius: 6px;
            margin-bottom: 10px;
        }
        .status-label {
            font-weight: 600;
            color: #7f8c8d;
        }
        .status-value {
            color: #2c3e50;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>GateMesh</h1>
            <p>Irrigation Control System</p>
        </div>
        
        <div class="content">
            <div class="card">
                <h3>Current Status</h3>
                <div class="status">
                    <span class="status-label">Node Type:</span>
                    <span class="status-value" id="nodeType">-</span>
                </div>
                <div class="status">
                    <span class="status-label">Zone:</span>
                    <span class="status-value" id="zone">-</span>
                </div>
                <div class="status">
                    <span class="status-label">Battery:</span>
                    <span class="status-value" id="battery">-</span>
                </div>
                <div class="status">
                    <span class="status-label">Signal:</span>
                    <span class="status-value" id="signal">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3>Configure Node</h3>
                <form id="configForm">
                    <div class="form-group">
                        <label>Node Role</label>
                        <select id="nodeRole" name="role">
                            <option value="1">Headgate Controller</option>
                            <option value="10">Water Level Sensor</option>
                            <option value="12">Soil Moisture Sensor</option>
                            <option value="20">Gate Valve</option>
                            <option value="2">Pump Controller</option>
                            <option value="14">Weather Station</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Zone ID</label>
                        <input type="number" id="zoneId" name="zone" min="0" max="99" value="0">
                    </div>
                    
                    <div class="form-group">
                        <label>Location Name</label>
                        <input type="text" id="location" name="location" placeholder="e.g., North Field Gate">
                    </div>
                    
                    <button type="submit" class="btn">Save Configuration</button>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        // Load status
        function loadStatus() {
            fetch('/api/status')
                .then(r => r.json())
                .then(data => {
                    document.getElementById('nodeType').textContent = data.typeName;
                    document.getElementById('zone').textContent = data.zone;
                    document.getElementById('battery').textContent = data.battery + '%';
                    document.getElementById('signal').textContent = data.rssi + ' dBm';
                });
        }
        
        // Save config
        document.getElementById('configForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const config = {
                role: parseInt(document.getElementById('nodeRole').value),
                zone: parseInt(document.getElementById('zoneId').value),
                location: document.getElementById('location').value
            };
            
            fetch('/api/config', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(config)
            })
            .then(r => r.json())
            .then(data => {
                alert('Configuration saved! Device will restart.');
                setTimeout(() => location.reload(), 3000);
            });
        });
        
        // Auto-refresh status
        loadStatus();
        setInterval(loadStatus, 5000);
    </script>
</body>
</html>
        )";
        
        server.send(200, "text/html", html);
    }
    
    void handleStatus() {
        StaticJsonDocument<256> doc;
        doc["nodeId"] = nodeDB.getNodeNum();
        doc["type"] = (uint8_t)nodeConfig.type;
        doc["typeName"] = getNodeTypeName(nodeConfig.type);
        doc["zone"] = nodeConfig.zoneId;
        doc["location"] = nodeConfig.locationName;
        doc["battery"] = getBatteryPercent();
        doc["rssi"] = getLastRSSI();
        doc["uptime"] = millis() / 1000;
        
        String json;
        serializeJson(doc, json);
        server.send(200, "application/json", json);
    }
    
    void handleConfig() {
        if (!server.hasArg("plain")) {
            server.send(400, "text/plain", "No data");
            return;
        }
        
        StaticJsonDocument<256> doc;
        deserializeJson(doc, server.arg("plain"));
        
        nodeConfig.type = (Irrigation::NodeType)doc["role"].as<uint8_t>();
        nodeConfig.zoneId = doc["zone"];
        strncpy(nodeConfig.locationName, doc["location"], 31);
        
        nodeConfig.save();
        
        server.send(200, "application/json", "{\"status\":\"ok\"}");
        
        // Restart after config
        delay(1000);
        ESP.restart();
    }
    
    void loop() {
        if (apMode) {
            dnsServer.processNextRequest();
        }
        server.handleClient();
    }
};
```

## API Endpoints

```
GET  /                - Main configuration page
GET  /api/status      - Node status JSON
POST /api/config      - Save configuration
GET  /api/zones       - List all zones
POST /api/command     - Send command to node
```

## Usage

```bash
# Enable web interface
> irrigation web enable

# Connect to WiFi AP
SSID: GateMesh-A1B2
Password: gatemesh123

# Open browser
http://192.168.4.1

# Configure node via web UI
# Save and restart
```

**Next**: Create `09_QUICK_START.md` for rapid deployment
